{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PSXLDevTools PowerShell Excel Developer Tools Module PowerShell Core Module for Advanced Office/Excel-based Developers. Links: Source Code | Documentation | Latest Release: [v0.0.1] | Published Module View the repo's CHANGELOG for details on the progression of the codebase over time. Installation Note View my other PowerShell creations from my PowerShell Gallery Packages Profile ! The module PSXLDevTools is published on the PowerShell Gallery and can be installed via PowerShellGet using the command(s) below: # Install from the PowerShell Gallery Install-Module -Name PSXLDevTools -Scope CurrentUser -Force # Import the module Import-Module -Name PSXLDevTools Overview #TODO Repository Click to Expand Repository File Structure Diagram > tree /F <root> \u2502 \u251c\u2500\u2500\u2500bin \u2502 Install-RequiredModules.ps1 \u2502 Invoke-PesterStub.ps1 \u2502 Update-ReadMeIndex.ps1 \u2502 \u251c\u2500\u2500\u2500docs \u2502 \u2514\u2500\u2500\u2500en-US \u2502 about_PSXLDevTools.help.md \u2502 \u251c\u2500\u2500\u2500PSXLDevTools \u2502 \u2502 PSXLDevTools.psd1 \u2502 \u2502 PSXLDevTools.psm1 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Dev \u2502 \u2502 \u2502 Invoke-XLBuild.ps1 \u2502 \u2502 \u2502 New-VBAProject.ps1 \u2502 \u2502 \u2502 New-VBAProjectConfig.ps1 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Exports \u2502 \u2502 \u2502 Export-CustomCellStyles.ps1 \u2502 \u2502 \u2502 Export-DataMashup.ps1 \u2502 \u2502 \u2502 Export-ListObject.ps1 \u2502 \u2502 \u2502 Export-ListObjects.ps1 \u2502 \u2502 \u2502 Export-PowerQuery.ps1 \u2502 \u2502 \u2502 Export-PowerQueryConnection.ps1 \u2502 \u2502 \u2502 Export-TableStyles.ps1 \u2502 \u2502 \u2502 Export-VBAComponent.ps1 \u2502 \u2502 \u2502 Export-VBAProjectProps.ps1 \u2502 \u2502 \u2502 Export-VBAReferences.ps1 \u2502 \u2502 \u2502 Export-WorksheetMetadata.ps1 \u2502 \u2502 \u2502 Export-XLConditionalFormatting.ps1 \u2502 \u2502 \u2502 Export-XLCustomLists.ps1 \u2502 \u2502 \u2502 Export-XLCustomRibbonX.ps1 \u2502 \u2502 \u2502 Export-XLDataModel.ps1 \u2502 \u2502 \u2502 Export-XLDataValidation.ps1 \u2502 \u2502 \u2502 Export-XLDocumentProps.ps1 \u2502 \u2502 \u2502 Export-XLPivotCache.ps1 \u2502 \u2502 \u2502 Export-XLPivotTable.ps1 \u2502 \u2502 \u2502 Export-XLTheme.ps1 \u2502 \u2502 \u2502 Export-XLThemeColors.ps1 \u2502 \u2502 \u2502 Export-XLThemeFonts.ps1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500Imports \u2502 \u2502 Import-DataMashup.ps1 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Private \u2502 \u2502 GetHelloWorld.ps1 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500Public \u2502 Export-PowerQueries.ps1 \u2502 Get-HelloWorld.ps1 \u2502 \u251c\u2500\u2500\u2500resources \u2502 \u2502 dirtree.js \u2502 \u2502 md.config.js \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500images \u2502 excel.ico \u2502 office365.ico \u2502 powershell.ico \u2502 powershellcore-preview.ico \u2502 powershellcore.png \u2502 regedit.ico \u2502 win10.ico \u2502 windowspowershell.ico \u2502 \u251c\u2500\u2500\u2500tests \u2502 \u2502 Export-PowerQueries.tests.ps1 \u2502 \u2502 Help.tests.ps1 \u2502 \u2502 Manifest.tests.ps1 \u2502 \u2502 Meta.tests.ps1 \u2502 \u2502 MetaFixers.psm1 \u2502 \u2502 ScriptAnalyzerSettings.psd1 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500TestWorkbooks \u2502 \u2502 .editorconfig \u2502 .gitattributes \u2502 .gitignore \u2502 build.ps1 \u2502 CHANGELOG.md \u2502 cliff.toml \u2502 LICENSE \u2502 mkdocs.yml \u2502 psakeFile.ps1 \u2502 README.md \u2502 RequiredModules.psd1 \u2502 requirements.psd1 \u2502 \u251c\u2500\u2500\u2500.devcontainer \u2502 devcontainer.json \u2502 Dockerfile \u2502 \u251c\u2500\u2500\u2500.github \u2502 \u2502 CONTRIBUTING.md \u2502 \u2502 ISSUE_TEMPLATE.md \u2502 \u2502 PULL_REQUEST_TEMPLATE.md \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500workflows \u2502 build.yml \u2502 changelog.yml \u2502 lint.yml \u2502 mkdocs.yml \u2502 publish.yml \u2502 readme.yml \u2502 test.yml \u2502 \u251c\u2500\u2500\u2500.vscode \u2502 extensions.json \u2502 launch.json \u2502 settings.json \u2502 tasks.json Appendices Contributing #TODO License LICENSE Credits #TODO Changelog Changelog","title":"Home"},{"location":"#installation","text":"Note View my other PowerShell creations from my PowerShell Gallery Packages Profile ! The module PSXLDevTools is published on the PowerShell Gallery and can be installed via PowerShellGet using the command(s) below: # Install from the PowerShell Gallery Install-Module -Name PSXLDevTools -Scope CurrentUser -Force # Import the module Import-Module -Name PSXLDevTools","title":"Installation"},{"location":"#overview","text":"#TODO","title":"Overview"},{"location":"#repository","text":"Click to Expand Repository File Structure Diagram > tree /F <root> \u2502 \u251c\u2500\u2500\u2500bin \u2502 Install-RequiredModules.ps1 \u2502 Invoke-PesterStub.ps1 \u2502 Update-ReadMeIndex.ps1 \u2502 \u251c\u2500\u2500\u2500docs \u2502 \u2514\u2500\u2500\u2500en-US \u2502 about_PSXLDevTools.help.md \u2502 \u251c\u2500\u2500\u2500PSXLDevTools \u2502 \u2502 PSXLDevTools.psd1 \u2502 \u2502 PSXLDevTools.psm1 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Dev \u2502 \u2502 \u2502 Invoke-XLBuild.ps1 \u2502 \u2502 \u2502 New-VBAProject.ps1 \u2502 \u2502 \u2502 New-VBAProjectConfig.ps1 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Exports \u2502 \u2502 \u2502 Export-CustomCellStyles.ps1 \u2502 \u2502 \u2502 Export-DataMashup.ps1 \u2502 \u2502 \u2502 Export-ListObject.ps1 \u2502 \u2502 \u2502 Export-ListObjects.ps1 \u2502 \u2502 \u2502 Export-PowerQuery.ps1 \u2502 \u2502 \u2502 Export-PowerQueryConnection.ps1 \u2502 \u2502 \u2502 Export-TableStyles.ps1 \u2502 \u2502 \u2502 Export-VBAComponent.ps1 \u2502 \u2502 \u2502 Export-VBAProjectProps.ps1 \u2502 \u2502 \u2502 Export-VBAReferences.ps1 \u2502 \u2502 \u2502 Export-WorksheetMetadata.ps1 \u2502 \u2502 \u2502 Export-XLConditionalFormatting.ps1 \u2502 \u2502 \u2502 Export-XLCustomLists.ps1 \u2502 \u2502 \u2502 Export-XLCustomRibbonX.ps1 \u2502 \u2502 \u2502 Export-XLDataModel.ps1 \u2502 \u2502 \u2502 Export-XLDataValidation.ps1 \u2502 \u2502 \u2502 Export-XLDocumentProps.ps1 \u2502 \u2502 \u2502 Export-XLPivotCache.ps1 \u2502 \u2502 \u2502 Export-XLPivotTable.ps1 \u2502 \u2502 \u2502 Export-XLTheme.ps1 \u2502 \u2502 \u2502 Export-XLThemeColors.ps1 \u2502 \u2502 \u2502 Export-XLThemeFonts.ps1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500Imports \u2502 \u2502 Import-DataMashup.ps1 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Private \u2502 \u2502 GetHelloWorld.ps1 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500Public \u2502 Export-PowerQueries.ps1 \u2502 Get-HelloWorld.ps1 \u2502 \u251c\u2500\u2500\u2500resources \u2502 \u2502 dirtree.js \u2502 \u2502 md.config.js \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500images \u2502 excel.ico \u2502 office365.ico \u2502 powershell.ico \u2502 powershellcore-preview.ico \u2502 powershellcore.png \u2502 regedit.ico \u2502 win10.ico \u2502 windowspowershell.ico \u2502 \u251c\u2500\u2500\u2500tests \u2502 \u2502 Export-PowerQueries.tests.ps1 \u2502 \u2502 Help.tests.ps1 \u2502 \u2502 Manifest.tests.ps1 \u2502 \u2502 Meta.tests.ps1 \u2502 \u2502 MetaFixers.psm1 \u2502 \u2502 ScriptAnalyzerSettings.psd1 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500TestWorkbooks \u2502 \u2502 .editorconfig \u2502 .gitattributes \u2502 .gitignore \u2502 build.ps1 \u2502 CHANGELOG.md \u2502 cliff.toml \u2502 LICENSE \u2502 mkdocs.yml \u2502 psakeFile.ps1 \u2502 README.md \u2502 RequiredModules.psd1 \u2502 requirements.psd1 \u2502 \u251c\u2500\u2500\u2500.devcontainer \u2502 devcontainer.json \u2502 Dockerfile \u2502 \u251c\u2500\u2500\u2500.github \u2502 \u2502 CONTRIBUTING.md \u2502 \u2502 ISSUE_TEMPLATE.md \u2502 \u2502 PULL_REQUEST_TEMPLATE.md \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500workflows \u2502 build.yml \u2502 changelog.yml \u2502 lint.yml \u2502 mkdocs.yml \u2502 publish.yml \u2502 readme.yml \u2502 test.yml \u2502 \u251c\u2500\u2500\u2500.vscode \u2502 extensions.json \u2502 launch.json \u2502 settings.json \u2502 tasks.json","title":"Repository"},{"location":"#appendices","text":"","title":"Appendices"},{"location":"#contributing","text":"#TODO","title":"Contributing"},{"location":"#license","text":"LICENSE","title":"License"},{"location":"#credits","text":"#TODO","title":"Credits"},{"location":"#changelog","text":"Changelog","title":"Changelog"},{"location":"About/","text":"About PowerShell Gallery The module PSClearHost is published on the PowerShell Gallery : https://powershellgallery.com/PSXLDevTools/ View my other PowerShell creations from My PowerShell Gallery Profile ! Changelog See the Changelog for detailed development over time! Installation # Install from the PowerShell Gallery Install-Module -Name PSXLDevTools -Scope CurrentUser -Force # Import the module Import-Module -Name PSXLDevTools Roadmap VBA Related Source Code Management VBA Project Development and Engineering VBA Project Builds Excel Workbook Development and Engineering Excel Workbook Source Code Management Excel Workbook Builds Excel Workbook Development and Engineering Office Fluent Ribbon XML Workbook Metadata, Styling, Themes, and Custom Properties Workbook Styling, Themes, and Formats Data Engineering and Modeling with PowerQuery and PowerPivot Data Models PowerQuery Source Code Management (M-Code Formulae and Metadata) Excel Data Model Integration Developer Tool Integration and Automation VBA Related Source Code Management Import/Export VBA Project Code Modules: Standard Modules: Source/VBA/Modules/mod*.bas Class Modules: Source/VBA/Classes/cls*.cls Class Interface Modules: Source/VBA/Interfaces/Icls*.cls Excel Object Class Modules: Source/VBA/ExcelObjects/<WorksheetCodeName>.docls|ThisWorkbook.docls User Forms: Source/VBA/Forms/frm*.frm ( Optionally can remove any unnecessary .frx exported binaries. ) User Form Controls and Properties: Source/VBA/Forms/FormControlsProperties.txt Import/Export VBA Project Properties: VBAProjectProps.txt Import/Export VBA Project References / Dependencies: References.txt Bundle _DEV.xlsm development workbooks and separate _DEV.xlam addins for preliminary setup and development tasks. VBA Project Development and Engineering Debug, Compile, and Run Unit Tests on VBA Source Code without Opening Excel. Automate template creation for VBA Projects and VBA Project Groups (Standard/Common Library Support). Automate Documentation of VBA Project Code Modules. Automate Documentation of Dependencies and References for VBA Projects and VBA Project Groups. Lint and Format VBA Source Code. Report test-coverage on VBA Source Code. Report on VBA Source Code Complexity (Cyclomatic, etc.). VBA Project Builds Create VBA Project Group (Library) Manifest: <ProjectGroupName>.vbg Create VBA Project Manifest: <ProjectName>.vbp Bundle, Build, and Compile Excel VBA Projects and in turn, de-compile or extract items from .rels , VBAProject.bin , and other potential helpful internals. Curate separate layers for Debug , Dev , Test , and Prod environments using conditional compilation directives or arguments. This allows for the creation of a single VBA Project that can be used in multiple environments. It also allows for the developer to toggle on extra components with features such as debug and trace event logging, developer tools, tests, documentation generation, code-review, etc. Strip final production builds of all unnecessary code, comments, and other items that are not needed for the final production build. Excel Workbook Development and Engineering Office Fluent Ribbon XML Manage and Import/Export Custom RibbonX Components: Excel Workbook Custom Ribbon XML: Source/Excel/RibbonX/customUI14.xml|customUI.xml Ribbon Callback Procedures Skeleton: Source/Excel/RibbonX/Callbacks.txt Any Icons or Images used in the Ribbon: Source/Excel/RibbonX/Images/*[.ico|.png|.jpg] Workbook Metadata, Styling, Themes, and Custom Properties Manage and Import/Export Excel Workbook Metadata: Workbook Custom Document Properties: Source/Excel/Metadata/DocumentProperties.txt WorkSheet Metadata (Code Names, Display Names, Tab Colors, etc.): Source/Excel/Metadata/Worksheets.txt NamedRanges: Source/Excel/Metadata/NamedRanges.txt ListObjects (Tables): Source/Excel/Metadata/ListObjects.txt PivotTables: Source/Excel/Metadata/PivotTables.txt PivotCaches: Source/Excel/Metadata/PivotCaches.xml Custom XML: Source/Excel/Metadata/CustomXMLMap.xlm Workbook Styling, Themes, and Formats Manage and Import/Export Excel Workbook Design Elements: Custom Themes, Theme Colors, Theme Fonts, and Theme Effects: Source/Excel/Themes/<ProjectName>.thmx Source/Excel/Themes/Theme Colors/<ProjectName>_Colors.xml Source/Excel/Themes/Theme Fonts/<ProjectName>_Fonts.xml Source/Excel/Themes/Theme Effects/<ProjectName>_Effects.xml Cell Styles: Source/Excel/Metadata/CellStyles.xml Number Formats: Source/Excel/Metadata/NumberFormats.txt Conditional Formatting Rules: Source/Excel/Metadata/ConditionalFormattingRules.txt TableStyles: Source/Excel/Metadata/TableStyles.xml Custom Lists: Source/Excel/Metadata/CustomLists.xml Charts: Source/Excel/Metadata/Charts.txt Data Engineering and Modeling with PowerQuery and PowerPivot Data Models PowerQuery Source Code Management (M-Code Formulae and Metadata) Manage and Import/Export PowerQuery M-Code: PowerQuery Queries: Source/PowerQuery/Queries/*.pq PowerQuery Query Metadata: Source/PowerQuery/Queries/*.meta.pq PowerQuery Query Data Source Dependencies: Source/PowerQuery/DataSources/*.pqd Data Mashups: Source/PowerQuery/Mashups/*.pqm Custom User Defined Functions and Parameters: Source/PowerQuery/UDFs/*.pq , Source/PowerQuery/Parameters/*.pq Associated Workbook Connections: Source/PowerQuery/Connections/*.odc Associated ListObjects/Query Tables: Source/PowerQuery/Tables/*.xml Aggregate a library of PowerQuery Formulae and associated metadata into a single file for easy import/export. Manage Data Flow by Removing Connections and Queries from the Workbook after used, or as necessary. Excel Data Model Integration Manage and Import/Export Excel Workbook Data Models: Data Model Office Data Connection: Source/PowerQuery/Connections/DataModel.odc Data Model Metadata: Source/Excel/Model/DataModel.xml Data Model Relationships: Source/Excel/Model/DataModelRelationships.xml Data Model Tables: Source/Excel/Model/DataModelTables.xml Import/Export Connection Strings and Parameterized Queries from the Data Model. Manage ADO and DAO based connections. Developer Tool Integration and Automation Version Control over Excel Workbooks, Data Models, PowerQuery, VBA Projects. Office RibbonX Editor VSCode + Extensions DAXStudio + PowerBI Desktop Excel + VBE Customizations + PowerQuery Editor Repository Click to Expand Repository File Structure Diagram > tree /F <root> \u2502 \u251c\u2500\u2500\u2500bin \u2502 Install-RequiredModules.ps1 \u2502 Invoke-PesterStub.ps1 \u2502 Update-ReadMeIndex.ps1 \u2502 \u251c\u2500\u2500\u2500docs \u2502 \u2514\u2500\u2500\u2500en-US \u2502 about_PSXLDevTools.help.md \u2502 \u251c\u2500\u2500\u2500PSXLDevTools \u2502 \u2502 PSXLDevTools.psd1 \u2502 \u2502 PSXLDevTools.psm1 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Dev \u2502 \u2502 \u2502 Invoke-XLBuild.ps1 \u2502 \u2502 \u2502 New-VBAProject.ps1 \u2502 \u2502 \u2502 New-VBAProjectConfig.ps1 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Exports \u2502 \u2502 \u2502 Export-CustomCellStyles.ps1 \u2502 \u2502 \u2502 Export-DataMashup.ps1 \u2502 \u2502 \u2502 Export-ListObject.ps1 \u2502 \u2502 \u2502 Export-ListObjects.ps1 \u2502 \u2502 \u2502 Export-PowerQuery.ps1 \u2502 \u2502 \u2502 Export-PowerQueryConnection.ps1 \u2502 \u2502 \u2502 Export-TableStyles.ps1 \u2502 \u2502 \u2502 Export-VBAComponent.ps1 \u2502 \u2502 \u2502 Export-VBAProjectProps.ps1 \u2502 \u2502 \u2502 Export-VBAReferences.ps1 \u2502 \u2502 \u2502 Export-WorksheetMetadata.ps1 \u2502 \u2502 \u2502 Export-XLConditionalFormatting.ps1 \u2502 \u2502 \u2502 Export-XLCustomLists.ps1 \u2502 \u2502 \u2502 Export-XLCustomRibbonX.ps1 \u2502 \u2502 \u2502 Export-XLDataModel.ps1 \u2502 \u2502 \u2502 Export-XLDataValidation.ps1 \u2502 \u2502 \u2502 Export-XLDocumentProps.ps1 \u2502 \u2502 \u2502 Export-XLPivotCache.ps1 \u2502 \u2502 \u2502 Export-XLPivotTable.ps1 \u2502 \u2502 \u2502 Export-XLTheme.ps1 \u2502 \u2502 \u2502 Export-XLThemeColors.ps1 \u2502 \u2502 \u2502 Export-XLThemeFonts.ps1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500Imports \u2502 \u2502 Import-DataMashup.ps1 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Private \u2502 \u2502 GetHelloWorld.ps1 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500Public \u2502 Export-PowerQueries.ps1 \u2502 Get-HelloWorld.ps1 \u2502 \u251c\u2500\u2500\u2500resources \u2502 \u2502 dirtree.js \u2502 \u2502 md.config.js \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500images \u2502 excel.ico \u2502 office365.ico \u2502 powershell.ico \u2502 powershellcore-preview.ico \u2502 powershellcore.png \u2502 regedit.ico \u2502 win10.ico \u2502 windowspowershell.ico \u2502 \u251c\u2500\u2500\u2500tests \u2502 \u2502 Export-PowerQueries.tests.ps1 \u2502 \u2502 Help.tests.ps1 \u2502 \u2502 Manifest.tests.ps1 \u2502 \u2502 Meta.tests.ps1 \u2502 \u2502 MetaFixers.psm1 \u2502 \u2502 ScriptAnalyzerSettings.psd1 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500TestWorkbooks \u2502 \u2502 .editorconfig \u2502 .gitattributes \u2502 .gitignore \u2502 build.ps1 \u2502 CHANGELOG.md \u2502 cliff.toml \u2502 LICENSE \u2502 mkdocs.yml \u2502 psakeFile.ps1 \u2502 README.md \u2502 RequiredModules.psd1 \u2502 requirements.psd1 \u2502 \u251c\u2500\u2500\u2500.devcontainer \u2502 devcontainer.json \u2502 Dockerfile \u2502 \u251c\u2500\u2500\u2500.github \u2502 \u2502 CONTRIBUTING.md \u2502 \u2502 ISSUE_TEMPLATE.md \u2502 \u2502 PULL_REQUEST_TEMPLATE.md \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500workflows \u2502 build.yml \u2502 changelog.yml \u2502 lint.yml \u2502 mkdocs.yml \u2502 publish.yml \u2502 readme.yml \u2502 test.yml \u2502 \u251c\u2500\u2500\u2500.vscode \u2502 extensions.json \u2502 launch.json \u2502 settings.json \u2502 tasks.json","title":"About"},{"location":"About/#about","text":"","title":"About"},{"location":"About/#powershell-gallery","text":"The module PSClearHost is published on the PowerShell Gallery : https://powershellgallery.com/PSXLDevTools/ View my other PowerShell creations from My PowerShell Gallery Profile !","title":"PowerShell Gallery"},{"location":"About/#changelog","text":"See the Changelog for detailed development over time!","title":"Changelog"},{"location":"About/#installation","text":"# Install from the PowerShell Gallery Install-Module -Name PSXLDevTools -Scope CurrentUser -Force # Import the module Import-Module -Name PSXLDevTools","title":"Installation"},{"location":"About/#roadmap","text":"VBA Related Source Code Management VBA Project Development and Engineering VBA Project Builds Excel Workbook Development and Engineering Excel Workbook Source Code Management Excel Workbook Builds Excel Workbook Development and Engineering Office Fluent Ribbon XML Workbook Metadata, Styling, Themes, and Custom Properties Workbook Styling, Themes, and Formats Data Engineering and Modeling with PowerQuery and PowerPivot Data Models PowerQuery Source Code Management (M-Code Formulae and Metadata) Excel Data Model Integration Developer Tool Integration and Automation","title":"Roadmap"},{"location":"About/#vba-related","text":"","title":"VBA Related"},{"location":"About/#source-code-management","text":"Import/Export VBA Project Code Modules: Standard Modules: Source/VBA/Modules/mod*.bas Class Modules: Source/VBA/Classes/cls*.cls Class Interface Modules: Source/VBA/Interfaces/Icls*.cls Excel Object Class Modules: Source/VBA/ExcelObjects/<WorksheetCodeName>.docls|ThisWorkbook.docls User Forms: Source/VBA/Forms/frm*.frm ( Optionally can remove any unnecessary .frx exported binaries. ) User Form Controls and Properties: Source/VBA/Forms/FormControlsProperties.txt Import/Export VBA Project Properties: VBAProjectProps.txt Import/Export VBA Project References / Dependencies: References.txt Bundle _DEV.xlsm development workbooks and separate _DEV.xlam addins for preliminary setup and development tasks.","title":"Source Code Management"},{"location":"About/#vba-project-development-and-engineering","text":"Debug, Compile, and Run Unit Tests on VBA Source Code without Opening Excel. Automate template creation for VBA Projects and VBA Project Groups (Standard/Common Library Support). Automate Documentation of VBA Project Code Modules. Automate Documentation of Dependencies and References for VBA Projects and VBA Project Groups. Lint and Format VBA Source Code. Report test-coverage on VBA Source Code. Report on VBA Source Code Complexity (Cyclomatic, etc.).","title":"VBA Project Development and Engineering"},{"location":"About/#vba-project-builds","text":"Create VBA Project Group (Library) Manifest: <ProjectGroupName>.vbg Create VBA Project Manifest: <ProjectName>.vbp Bundle, Build, and Compile Excel VBA Projects and in turn, de-compile or extract items from .rels , VBAProject.bin , and other potential helpful internals. Curate separate layers for Debug , Dev , Test , and Prod environments using conditional compilation directives or arguments. This allows for the creation of a single VBA Project that can be used in multiple environments. It also allows for the developer to toggle on extra components with features such as debug and trace event logging, developer tools, tests, documentation generation, code-review, etc. Strip final production builds of all unnecessary code, comments, and other items that are not needed for the final production build.","title":"VBA Project Builds"},{"location":"About/#excel-workbook-development-and-engineering","text":"","title":"Excel Workbook Development and Engineering"},{"location":"About/#office-fluent-ribbon-xml","text":"Manage and Import/Export Custom RibbonX Components: Excel Workbook Custom Ribbon XML: Source/Excel/RibbonX/customUI14.xml|customUI.xml Ribbon Callback Procedures Skeleton: Source/Excel/RibbonX/Callbacks.txt Any Icons or Images used in the Ribbon: Source/Excel/RibbonX/Images/*[.ico|.png|.jpg]","title":"Office Fluent Ribbon XML"},{"location":"About/#workbook-metadata-styling-themes-and-custom-properties","text":"Manage and Import/Export Excel Workbook Metadata: Workbook Custom Document Properties: Source/Excel/Metadata/DocumentProperties.txt WorkSheet Metadata (Code Names, Display Names, Tab Colors, etc.): Source/Excel/Metadata/Worksheets.txt NamedRanges: Source/Excel/Metadata/NamedRanges.txt ListObjects (Tables): Source/Excel/Metadata/ListObjects.txt PivotTables: Source/Excel/Metadata/PivotTables.txt PivotCaches: Source/Excel/Metadata/PivotCaches.xml Custom XML: Source/Excel/Metadata/CustomXMLMap.xlm","title":"Workbook Metadata, Styling, Themes, and Custom Properties"},{"location":"About/#workbook-styling-themes-and-formats","text":"Manage and Import/Export Excel Workbook Design Elements: Custom Themes, Theme Colors, Theme Fonts, and Theme Effects: Source/Excel/Themes/<ProjectName>.thmx Source/Excel/Themes/Theme Colors/<ProjectName>_Colors.xml Source/Excel/Themes/Theme Fonts/<ProjectName>_Fonts.xml Source/Excel/Themes/Theme Effects/<ProjectName>_Effects.xml Cell Styles: Source/Excel/Metadata/CellStyles.xml Number Formats: Source/Excel/Metadata/NumberFormats.txt Conditional Formatting Rules: Source/Excel/Metadata/ConditionalFormattingRules.txt TableStyles: Source/Excel/Metadata/TableStyles.xml Custom Lists: Source/Excel/Metadata/CustomLists.xml Charts: Source/Excel/Metadata/Charts.txt","title":"Workbook Styling, Themes, and Formats"},{"location":"About/#data-engineering-and-modeling-with-powerquery-and-powerpivot-data-models","text":"","title":"Data Engineering and Modeling with PowerQuery and PowerPivot Data Models"},{"location":"About/#powerquery-source-code-management-m-code-formulae-and-metadata","text":"Manage and Import/Export PowerQuery M-Code: PowerQuery Queries: Source/PowerQuery/Queries/*.pq PowerQuery Query Metadata: Source/PowerQuery/Queries/*.meta.pq PowerQuery Query Data Source Dependencies: Source/PowerQuery/DataSources/*.pqd Data Mashups: Source/PowerQuery/Mashups/*.pqm Custom User Defined Functions and Parameters: Source/PowerQuery/UDFs/*.pq , Source/PowerQuery/Parameters/*.pq Associated Workbook Connections: Source/PowerQuery/Connections/*.odc Associated ListObjects/Query Tables: Source/PowerQuery/Tables/*.xml Aggregate a library of PowerQuery Formulae and associated metadata into a single file for easy import/export. Manage Data Flow by Removing Connections and Queries from the Workbook after used, or as necessary.","title":"PowerQuery Source Code Management (M-Code Formulae and Metadata)"},{"location":"About/#excel-data-model-integration","text":"Manage and Import/Export Excel Workbook Data Models: Data Model Office Data Connection: Source/PowerQuery/Connections/DataModel.odc Data Model Metadata: Source/Excel/Model/DataModel.xml Data Model Relationships: Source/Excel/Model/DataModelRelationships.xml Data Model Tables: Source/Excel/Model/DataModelTables.xml Import/Export Connection Strings and Parameterized Queries from the Data Model. Manage ADO and DAO based connections.","title":"Excel Data Model Integration"},{"location":"About/#developer-tool-integration-and-automation","text":"Version Control over Excel Workbooks, Data Models, PowerQuery, VBA Projects. Office RibbonX Editor VSCode + Extensions DAXStudio + PowerBI Desktop Excel + VBE Customizations + PowerQuery Editor","title":"Developer Tool Integration and Automation"},{"location":"About/#repository","text":"Click to Expand Repository File Structure Diagram > tree /F <root> \u2502 \u251c\u2500\u2500\u2500bin \u2502 Install-RequiredModules.ps1 \u2502 Invoke-PesterStub.ps1 \u2502 Update-ReadMeIndex.ps1 \u2502 \u251c\u2500\u2500\u2500docs \u2502 \u2514\u2500\u2500\u2500en-US \u2502 about_PSXLDevTools.help.md \u2502 \u251c\u2500\u2500\u2500PSXLDevTools \u2502 \u2502 PSXLDevTools.psd1 \u2502 \u2502 PSXLDevTools.psm1 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Dev \u2502 \u2502 \u2502 Invoke-XLBuild.ps1 \u2502 \u2502 \u2502 New-VBAProject.ps1 \u2502 \u2502 \u2502 New-VBAProjectConfig.ps1 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Exports \u2502 \u2502 \u2502 Export-CustomCellStyles.ps1 \u2502 \u2502 \u2502 Export-DataMashup.ps1 \u2502 \u2502 \u2502 Export-ListObject.ps1 \u2502 \u2502 \u2502 Export-ListObjects.ps1 \u2502 \u2502 \u2502 Export-PowerQuery.ps1 \u2502 \u2502 \u2502 Export-PowerQueryConnection.ps1 \u2502 \u2502 \u2502 Export-TableStyles.ps1 \u2502 \u2502 \u2502 Export-VBAComponent.ps1 \u2502 \u2502 \u2502 Export-VBAProjectProps.ps1 \u2502 \u2502 \u2502 Export-VBAReferences.ps1 \u2502 \u2502 \u2502 Export-WorksheetMetadata.ps1 \u2502 \u2502 \u2502 Export-XLConditionalFormatting.ps1 \u2502 \u2502 \u2502 Export-XLCustomLists.ps1 \u2502 \u2502 \u2502 Export-XLCustomRibbonX.ps1 \u2502 \u2502 \u2502 Export-XLDataModel.ps1 \u2502 \u2502 \u2502 Export-XLDataValidation.ps1 \u2502 \u2502 \u2502 Export-XLDocumentProps.ps1 \u2502 \u2502 \u2502 Export-XLPivotCache.ps1 \u2502 \u2502 \u2502 Export-XLPivotTable.ps1 \u2502 \u2502 \u2502 Export-XLTheme.ps1 \u2502 \u2502 \u2502 Export-XLThemeColors.ps1 \u2502 \u2502 \u2502 Export-XLThemeFonts.ps1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500Imports \u2502 \u2502 Import-DataMashup.ps1 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500Private \u2502 \u2502 GetHelloWorld.ps1 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500Public \u2502 Export-PowerQueries.ps1 \u2502 Get-HelloWorld.ps1 \u2502 \u251c\u2500\u2500\u2500resources \u2502 \u2502 dirtree.js \u2502 \u2502 md.config.js \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500images \u2502 excel.ico \u2502 office365.ico \u2502 powershell.ico \u2502 powershellcore-preview.ico \u2502 powershellcore.png \u2502 regedit.ico \u2502 win10.ico \u2502 windowspowershell.ico \u2502 \u251c\u2500\u2500\u2500tests \u2502 \u2502 Export-PowerQueries.tests.ps1 \u2502 \u2502 Help.tests.ps1 \u2502 \u2502 Manifest.tests.ps1 \u2502 \u2502 Meta.tests.ps1 \u2502 \u2502 MetaFixers.psm1 \u2502 \u2502 ScriptAnalyzerSettings.psd1 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500TestWorkbooks \u2502 \u2502 .editorconfig \u2502 .gitattributes \u2502 .gitignore \u2502 build.ps1 \u2502 CHANGELOG.md \u2502 cliff.toml \u2502 LICENSE \u2502 mkdocs.yml \u2502 psakeFile.ps1 \u2502 README.md \u2502 RequiredModules.psd1 \u2502 requirements.psd1 \u2502 \u251c\u2500\u2500\u2500.devcontainer \u2502 devcontainer.json \u2502 Dockerfile \u2502 \u251c\u2500\u2500\u2500.github \u2502 \u2502 CONTRIBUTING.md \u2502 \u2502 ISSUE_TEMPLATE.md \u2502 \u2502 PULL_REQUEST_TEMPLATE.md \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500workflows \u2502 build.yml \u2502 changelog.yml \u2502 lint.yml \u2502 mkdocs.yml \u2502 publish.yml \u2502 readme.yml \u2502 test.yml \u2502 \u251c\u2500\u2500\u2500.vscode \u2502 extensions.json \u2502 launch.json \u2502 settings.json \u2502 tasks.json","title":"Repository"},{"location":"About/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . [Unreleased] Configuration Add module dependencies Initialize module/repo structure Documentation Enhance README with collapsible details Fix badge links in README Added markdown-magic js resources Made README awesome Add image assets to resources Create initial README with ROADMAP Initialize CHANGELOG with git-cliff automation Features Add first documented module: Export-PowerQueries.ps1 Create roadmap placeholders in Dev for future functions Add bin scripts Infrastructure Setup initial vscode tasks and settings Setup ci/cd via github actions Refactoring Refactor editorconfig for trailing whitespace issues Setup Create configs for project files and editor/git Initialize module/repo structure Testing Initialize tests Changelog generated by git-cliff .","title":"Changelog"},{"location":"About/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"About/CHANGELOG/#unreleased","text":"","title":"[Unreleased]"},{"location":"About/CHANGELOG/#configuration","text":"Add module dependencies Initialize module/repo structure","title":"Configuration"},{"location":"About/CHANGELOG/#documentation","text":"Enhance README with collapsible details Fix badge links in README Added markdown-magic js resources Made README awesome Add image assets to resources Create initial README with ROADMAP Initialize CHANGELOG with git-cliff automation","title":"Documentation"},{"location":"About/CHANGELOG/#features","text":"Add first documented module: Export-PowerQueries.ps1 Create roadmap placeholders in Dev for future functions Add bin scripts","title":"Features"},{"location":"About/CHANGELOG/#infrastructure","text":"Setup initial vscode tasks and settings Setup ci/cd via github actions","title":"Infrastructure"},{"location":"About/CHANGELOG/#refactoring","text":"Refactor editorconfig for trailing whitespace issues","title":"Refactoring"},{"location":"About/CHANGELOG/#setup","text":"Create configs for project files and editor/git Initialize module/repo structure","title":"Setup"},{"location":"About/CHANGELOG/#testing","text":"Initialize tests Changelog generated by git-cliff .","title":"Testing"},{"location":"About/about_PSXLDevTools.help/","text":"PSXLDevTools about_PSXLDevTools ABOUT TOPIC NOTE: The first header of the about topic should be the topic name. The second header contains the lookup name used by the help system. IE: # Some Help Topic Name ## SomeHelpTopicFileName This will be transformed into the text file as `about_SomeHelpTopicFileName`. Do not include file extensions. The second header should have no spaces. SHORT DESCRIPTION {{ Short Description Placeholder }} ABOUT TOPIC NOTE: About topics can be no longer than 80 characters wide when rendered to text. Any topics greater than 80 characters will be automatically wrapped. The generated about topic will be encoded UTF-8. LONG DESCRIPTION {{ Long Description Placeholder }} Optional Subtopics {{ Optional Subtopic Placeholder }} EXAMPLES {{ Code or descriptive examples of how to leverage the functions described. }} NOTE {{ Note Placeholder - Additional information that a user needs to know.}} TROUBLESHOOTING NOTE {{ Troubleshooting Placeholder - Warns users of bugs}} {{ Explains behavior that is likely to change with fixes }} SEE ALSO {{ See also placeholder }} {{ You can also list related articles, blogs, and video URLs. }} KEYWORDS {{List alternate names or titles for this topic that readers might use.}} {{ Keyword Placeholder }} {{ Keyword Placeholder }} {{ Keyword Placeholder }} {{ Keyword Placeholder }}","title":"PSXLDevTools"},{"location":"About/about_PSXLDevTools.help/#psxldevtools","text":"","title":"PSXLDevTools"},{"location":"About/about_PSXLDevTools.help/#about_psxldevtools","text":"ABOUT TOPIC NOTE: The first header of the about topic should be the topic name. The second header contains the lookup name used by the help system. IE: # Some Help Topic Name ## SomeHelpTopicFileName This will be transformed into the text file as `about_SomeHelpTopicFileName`. Do not include file extensions. The second header should have no spaces.","title":"about_PSXLDevTools"},{"location":"About/about_PSXLDevTools.help/#short-description","text":"{{ Short Description Placeholder }} ABOUT TOPIC NOTE: About topics can be no longer than 80 characters wide when rendered to text. Any topics greater than 80 characters will be automatically wrapped. The generated about topic will be encoded UTF-8.","title":"SHORT DESCRIPTION"},{"location":"About/about_PSXLDevTools.help/#long-description","text":"{{ Long Description Placeholder }}","title":"LONG DESCRIPTION"},{"location":"About/about_PSXLDevTools.help/#optional-subtopics","text":"{{ Optional Subtopic Placeholder }}","title":"Optional Subtopics"},{"location":"About/about_PSXLDevTools.help/#examples","text":"{{ Code or descriptive examples of how to leverage the functions described. }}","title":"EXAMPLES"},{"location":"About/about_PSXLDevTools.help/#note","text":"{{ Note Placeholder - Additional information that a user needs to know.}}","title":"NOTE"},{"location":"About/about_PSXLDevTools.help/#troubleshooting-note","text":"{{ Troubleshooting Placeholder - Warns users of bugs}} {{ Explains behavior that is likely to change with fixes }}","title":"TROUBLESHOOTING NOTE"},{"location":"About/about_PSXLDevTools.help/#see-also","text":"{{ See also placeholder }} {{ You can also list related articles, blogs, and video URLs. }}","title":"SEE ALSO"},{"location":"About/about_PSXLDevTools.help/#keywords","text":"{{List alternate names or titles for this topic that readers might use.}} {{ Keyword Placeholder }} {{ Keyword Placeholder }} {{ Keyword Placeholder }} {{ Keyword Placeholder }}","title":"KEYWORDS"},{"location":"About/roadmap/","text":"Roadmap VBA Related Source Code Management Import/Export VBA Project Code Modules: Standard Modules: Source/VBA/Modules/mod*.bas Class Modules: Source/VBA/Classes/cls*.cls Class Interface Modules: Source/VBA/Interfaces/Icls*.cls Excel Object Class Modules: Source/VBA/ExcelObjects/<WorksheetCodeName>.docls|ThisWorkbook.docls User Forms: Source/VBA/Forms/frm*.frm ( Optionally can remove any unnecessary .frx exported binaries. ) User Form Controls and Properties: Source/VBA/Forms/FormControlsProperties.txt Import/Export VBA Project Properties: VBAProjectProps.txt Import/Export VBA Project References / Dependencies: References.txt Bundle _DEV.xlsm development workbooks and separate _DEV.xlam addins for preliminary setup and development tasks. VBA Project Development and Engineering Debug, Compile, and Run Unit Tests on VBA Source Code without Opening Excel. Automate template creation for VBA Projects and VBA Project Groups (Standard/Common Library Support). Automate Documentation of VBA Project Code Modules. Automate Documentation of Dependencies and References for VBA Projects and VBA Project Groups. Lint and Format VBA Source Code. Report test-coverage on VBA Source Code. Report on VBA Source Code Complexity (Cyclomatic, etc.). VBA Project Builds Create VBA Project Group (Library) Manifest: <ProjectGroupName>.vbg Create VBA Project Manifest: <ProjectName>.vbp Bundle, Build, and Compile Excel VBA Projects and in turn, de-compile or extract items from .rels , VBAProject.bin , and other potential helpful internals. Curate separate layers for Debug , Dev , Test , and Prod environments using conditional compilation directives or arguments. This allows for the creation of a single VBA Project that can be used in multiple environments. It also allows for the developer to toggle on extra components with features such as debug and trace event logging, developer tools, tests, documentation generation, code-review, etc. Strip final production builds of all unnecessary code, comments, and other items that are not needed for the final production build. Excel Workbook Development and Engineering Office Fluent Ribbon XML Manage and Import/Export Custom RibbonX Components: Excel Workbook Custom Ribbon XML: Source/Excel/RibbonX/customUI14.xml|customUI.xml Ribbon Callback Procedures Skeleton: Source/Excel/RibbonX/Callbacks.txt Any Icons or Images used in the Ribbon: Source/Excel/RibbonX/Images/*[.ico|.png|.jpg] Workbook Metadata, Styling, Themes, and Custom Properties Manage and Import/Export Excel Workbook Metadata: Workbook Custom Document Properties: Source/Excel/Metadata/DocumentProperties.txt WorkSheet Metadata (Code Names, Display Names, Tab Colors, etc.): Source/Excel/Metadata/Worksheets.txt NamedRanges: Source/Excel/Metadata/NamedRanges.txt ListObjects (Tables): Source/Excel/Metadata/ListObjects.txt PivotTables: Source/Excel/Metadata/PivotTables.txt PivotCaches: Source/Excel/Metadata/PivotCaches.xml Custom XML: Source/Excel/Metadata/CustomXMLMap.xlm Workbook Styling, Themes, and Formats Manage and Import/Export Excel Workbook Design Elements: Custom Themes, Theme Colors, Theme Fonts, and Theme Effects: Source/Excel/Themes/<ProjectName>.thmx Source/Excel/Themes/Theme Colors/<ProjectName>_Colors.xml Source/Excel/Themes/Theme Fonts/<ProjectName>_Fonts.xml Source/Excel/Themes/Theme Effects/<ProjectName>_Effects.xml Cell Styles: Source/Excel/Metadata/CellStyles.xml Number Formats: Source/Excel/Metadata/NumberFormats.txt Conditional Formatting Rules: Source/Excel/Metadata/ConditionalFormattingRules.txt TableStyles: Source/Excel/Metadata/TableStyles.xml Custom Lists: Source/Excel/Metadata/CustomLists.xml Charts: Source/Excel/Metadata/Charts.txt Data Engineering and Modeling with PowerQuery and PowerPivot Data Models PowerQuery Source Code Management (M-Code Formulae and Metadata) Manage and Import/Export PowerQuery M-Code: PowerQuery Queries: Source/PowerQuery/Queries/*.pq PowerQuery Query Metadata: Source/PowerQuery/Queries/*.meta.pq PowerQuery Query Data Source Dependencies: Source/PowerQuery/DataSources/*.pqd Data Mashups: Source/PowerQuery/Mashups/*.pqm Custom User Defined Functions and Parameters: Source/PowerQuery/UDFs/*.pq , Source/PowerQuery/Parameters/*.pq Associated Workbook Connections: Source/PowerQuery/Connections/*.odc Associated ListObjects/Query Tables: Source/PowerQuery/Tables/*.xml Aggregate a library of PowerQuery Formulae and associated metadata into a single file for easy import/export. Manage Data Flow by Removing Connections and Queries from the Workbook after used, or as necessary. Excel Data Model Integration Manage and Import/Export Excel Workbook Data Models: Data Model Office Data Connection: Source/PowerQuery/Connections/DataModel.odc Data Model Metadata: Source/Excel/Model/DataModel.xml Data Model Relationships: Source/Excel/Model/DataModelRelationships.xml Data Model Tables: Source/Excel/Model/DataModelTables.xml Import/Export Connection Strings and Parameterized Queries from the Data Model. Manage ADO and DAO based connections. Developer Tool Integration and Automation Version Control over Excel Workbooks, Data Models, PowerQuery, VBA Projects. Office RibbonX Editor VSCode + Extensions DAXStudio + PowerBI Desktop Excel + VBE Customizations + PowerQuery Editor","title":"Roadmap"},{"location":"About/roadmap/#roadmap","text":"","title":"Roadmap"},{"location":"About/roadmap/#vba-related","text":"","title":"VBA Related"},{"location":"About/roadmap/#source-code-management","text":"Import/Export VBA Project Code Modules: Standard Modules: Source/VBA/Modules/mod*.bas Class Modules: Source/VBA/Classes/cls*.cls Class Interface Modules: Source/VBA/Interfaces/Icls*.cls Excel Object Class Modules: Source/VBA/ExcelObjects/<WorksheetCodeName>.docls|ThisWorkbook.docls User Forms: Source/VBA/Forms/frm*.frm ( Optionally can remove any unnecessary .frx exported binaries. ) User Form Controls and Properties: Source/VBA/Forms/FormControlsProperties.txt Import/Export VBA Project Properties: VBAProjectProps.txt Import/Export VBA Project References / Dependencies: References.txt Bundle _DEV.xlsm development workbooks and separate _DEV.xlam addins for preliminary setup and development tasks.","title":"Source Code Management"},{"location":"About/roadmap/#vba-project-development-and-engineering","text":"Debug, Compile, and Run Unit Tests on VBA Source Code without Opening Excel. Automate template creation for VBA Projects and VBA Project Groups (Standard/Common Library Support). Automate Documentation of VBA Project Code Modules. Automate Documentation of Dependencies and References for VBA Projects and VBA Project Groups. Lint and Format VBA Source Code. Report test-coverage on VBA Source Code. Report on VBA Source Code Complexity (Cyclomatic, etc.).","title":"VBA Project Development and Engineering"},{"location":"About/roadmap/#vba-project-builds","text":"Create VBA Project Group (Library) Manifest: <ProjectGroupName>.vbg Create VBA Project Manifest: <ProjectName>.vbp Bundle, Build, and Compile Excel VBA Projects and in turn, de-compile or extract items from .rels , VBAProject.bin , and other potential helpful internals. Curate separate layers for Debug , Dev , Test , and Prod environments using conditional compilation directives or arguments. This allows for the creation of a single VBA Project that can be used in multiple environments. It also allows for the developer to toggle on extra components with features such as debug and trace event logging, developer tools, tests, documentation generation, code-review, etc. Strip final production builds of all unnecessary code, comments, and other items that are not needed for the final production build.","title":"VBA Project Builds"},{"location":"About/roadmap/#excel-workbook-development-and-engineering","text":"","title":"Excel Workbook Development and Engineering"},{"location":"About/roadmap/#office-fluent-ribbon-xml","text":"Manage and Import/Export Custom RibbonX Components: Excel Workbook Custom Ribbon XML: Source/Excel/RibbonX/customUI14.xml|customUI.xml Ribbon Callback Procedures Skeleton: Source/Excel/RibbonX/Callbacks.txt Any Icons or Images used in the Ribbon: Source/Excel/RibbonX/Images/*[.ico|.png|.jpg]","title":"Office Fluent Ribbon XML"},{"location":"About/roadmap/#workbook-metadata-styling-themes-and-custom-properties","text":"Manage and Import/Export Excel Workbook Metadata: Workbook Custom Document Properties: Source/Excel/Metadata/DocumentProperties.txt WorkSheet Metadata (Code Names, Display Names, Tab Colors, etc.): Source/Excel/Metadata/Worksheets.txt NamedRanges: Source/Excel/Metadata/NamedRanges.txt ListObjects (Tables): Source/Excel/Metadata/ListObjects.txt PivotTables: Source/Excel/Metadata/PivotTables.txt PivotCaches: Source/Excel/Metadata/PivotCaches.xml Custom XML: Source/Excel/Metadata/CustomXMLMap.xlm","title":"Workbook Metadata, Styling, Themes, and Custom Properties"},{"location":"About/roadmap/#workbook-styling-themes-and-formats","text":"Manage and Import/Export Excel Workbook Design Elements: Custom Themes, Theme Colors, Theme Fonts, and Theme Effects: Source/Excel/Themes/<ProjectName>.thmx Source/Excel/Themes/Theme Colors/<ProjectName>_Colors.xml Source/Excel/Themes/Theme Fonts/<ProjectName>_Fonts.xml Source/Excel/Themes/Theme Effects/<ProjectName>_Effects.xml Cell Styles: Source/Excel/Metadata/CellStyles.xml Number Formats: Source/Excel/Metadata/NumberFormats.txt Conditional Formatting Rules: Source/Excel/Metadata/ConditionalFormattingRules.txt TableStyles: Source/Excel/Metadata/TableStyles.xml Custom Lists: Source/Excel/Metadata/CustomLists.xml Charts: Source/Excel/Metadata/Charts.txt","title":"Workbook Styling, Themes, and Formats"},{"location":"About/roadmap/#data-engineering-and-modeling-with-powerquery-and-powerpivot-data-models","text":"","title":"Data Engineering and Modeling with PowerQuery and PowerPivot Data Models"},{"location":"About/roadmap/#powerquery-source-code-management-m-code-formulae-and-metadata","text":"Manage and Import/Export PowerQuery M-Code: PowerQuery Queries: Source/PowerQuery/Queries/*.pq PowerQuery Query Metadata: Source/PowerQuery/Queries/*.meta.pq PowerQuery Query Data Source Dependencies: Source/PowerQuery/DataSources/*.pqd Data Mashups: Source/PowerQuery/Mashups/*.pqm Custom User Defined Functions and Parameters: Source/PowerQuery/UDFs/*.pq , Source/PowerQuery/Parameters/*.pq Associated Workbook Connections: Source/PowerQuery/Connections/*.odc Associated ListObjects/Query Tables: Source/PowerQuery/Tables/*.xml Aggregate a library of PowerQuery Formulae and associated metadata into a single file for easy import/export. Manage Data Flow by Removing Connections and Queries from the Workbook after used, or as necessary.","title":"PowerQuery Source Code Management (M-Code Formulae and Metadata)"},{"location":"About/roadmap/#excel-data-model-integration","text":"Manage and Import/Export Excel Workbook Data Models: Data Model Office Data Connection: Source/PowerQuery/Connections/DataModel.odc Data Model Metadata: Source/Excel/Model/DataModel.xml Data Model Relationships: Source/Excel/Model/DataModelRelationships.xml Data Model Tables: Source/Excel/Model/DataModelTables.xml Import/Export Connection Strings and Parameterized Queries from the Data Model. Manage ADO and DAO based connections.","title":"Excel Data Model Integration"},{"location":"About/roadmap/#developer-tool-integration-and-automation","text":"Version Control over Excel Workbooks, Data Models, PowerQuery, VBA Projects. Office RibbonX Editor VSCode + Extensions DAXStudio + PowerBI Desktop Excel + VBE Customizations + PowerQuery Editor","title":"Developer Tool Integration and Automation"},{"location":"Reference/","text":"PSXLDevTools Reference Table of Contents Functions Functions Export-PowerQueries Excel Excel Reference VBA VBA Reference PowerQuery PowerQuery Reference Appendices","title":"PSXLDevTools Reference"},{"location":"Reference/#psxldevtools-reference","text":"","title":"PSXLDevTools Reference"},{"location":"Reference/#table-of-contents","text":"Functions","title":"Table of Contents"},{"location":"Reference/#functions","text":"Export-PowerQueries","title":"Functions"},{"location":"Reference/#excel","text":"Excel Reference","title":"Excel"},{"location":"Reference/#vba","text":"VBA Reference","title":"VBA"},{"location":"Reference/#powerquery","text":"PowerQuery Reference","title":"PowerQuery"},{"location":"Reference/#appendices","text":"","title":"Appendices"},{"location":"Reference/Excel%20Reference/","text":"","title":"Index"},{"location":"Reference/Functions/Export-PowerQueries/","text":"Export-PowerQueries SYNOPSIS Exports Power Queries' M-Code Formulae from an Excel PowerQuery Enabled Workbook to a specified folder. SYNTAX Export-PowerQueries [-Path] <String> [[-ExportPath] <String>] [[-Extension] <String>] [-Force] [<CommonParameters>] DESCRIPTION This function exports Power Queries' M-Code Formulae from an Excel PowerQuery Enabled Workbook to a specified destination source code folder. This allows for the M-Code to be version controlled and maintained in a source code repository alongside the rest of the workbook's source code (VBA, XML, SQL, DAX, etc.). The function is designed to be used in conjunction with the Import-PowerQueries function, which imports all of the Power Queries' M-Code Formulae from the specified source code folder into the Excel PowerQuery Enabled Workbook. EXAMPLES EXAMPLE 1 Export-PowerQueries -Path \".\\MyWorkbook.xlsx\" -ExportPath \".\\Source\\PowerQuery\" Successfully exported MyQuery to file C:\\MyProject\\Source\\PowerQuery\\MyQuery.pq Successfully exported MyOtherQuery to file C:\\MyProject\\Source\\PowerQuery\\MyOtherQuery.pq EXAMPLE 2 Export-PowerQueries -Path .\\Test.xlsm -ExportPath .\\Source\\PQ -Extension .pqm -Force Successfully exported MyQuery to file C:\\MyProject\\Source\\PQ\\MyQuery.pqm Successfully exported MyOtherQuery to file C:\\MyProject\\Source\\PQ\\MyOtherQuery.pqm PARAMETERS -Path The path to the Excel PowerQuery Enabled Workbook. Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -ExportPath (Optional) The path to the folder where the Power Queries' M-Code Formulae will be exported to. If not specified, `\\<ProjectRoot>/Source/PowerQuery/*` is used as the default source code export path for the queries. Type: String Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: .\\Source\\PowerQuery Accept pipeline input: False Accept wildcard characters: False -Extension (Optional) The file extension to use for the exported Power Queries' M-Code Formulae. If not specified, `.pq` is used as the default file extension. Typically, `.pq` is used for Power Query M-Code files, but other extensions are also common such as `.m`, `.pqm`, `.txt`, etc. Type: String Parameter Sets: (All) Aliases: Required: False Position: 3 Default value: .pq Accept pipeline input: False Accept wildcard characters: False -Force (Optional) If specified, the function will overwrite any existing files in the specified source code export path. Type: SwitchParameter Parameter Sets: (All) Aliases: Required: False Position: Named Default value: False Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.ArrayList NOTES During Development of Excel based applications, an essential component of developing and maintaining the project's source code is continuous export/import and synchronization of source files with the host application for portability and most of all, version control. One area typically overlooked in this regard is the M-Code behind the Power Query components in the workbook's data model. Whether it be a Dynamic Query, User Defined Function, Query Parameter, Lookup Table, or any other Power Query component type (i.e. template, data source, properties, metadata, etc.), the M-Code behind the scenes is the foundation that all queries are built from and what drives the core behaviour of the query's component. RELATED LINKS","title":"Export-PowerQueries"},{"location":"Reference/Functions/Export-PowerQueries/#export-powerqueries","text":"","title":"Export-PowerQueries"},{"location":"Reference/Functions/Export-PowerQueries/#synopsis","text":"Exports Power Queries' M-Code Formulae from an Excel PowerQuery Enabled Workbook to a specified folder.","title":"SYNOPSIS"},{"location":"Reference/Functions/Export-PowerQueries/#syntax","text":"Export-PowerQueries [-Path] <String> [[-ExportPath] <String>] [[-Extension] <String>] [-Force] [<CommonParameters>]","title":"SYNTAX"},{"location":"Reference/Functions/Export-PowerQueries/#description","text":"This function exports Power Queries' M-Code Formulae from an Excel PowerQuery Enabled Workbook to a specified destination source code folder. This allows for the M-Code to be version controlled and maintained in a source code repository alongside the rest of the workbook's source code (VBA, XML, SQL, DAX, etc.). The function is designed to be used in conjunction with the Import-PowerQueries function, which imports all of the Power Queries' M-Code Formulae from the specified source code folder into the Excel PowerQuery Enabled Workbook.","title":"DESCRIPTION"},{"location":"Reference/Functions/Export-PowerQueries/#examples","text":"","title":"EXAMPLES"},{"location":"Reference/Functions/Export-PowerQueries/#example-1","text":"Export-PowerQueries -Path \".\\MyWorkbook.xlsx\" -ExportPath \".\\Source\\PowerQuery\" Successfully exported MyQuery to file C:\\MyProject\\Source\\PowerQuery\\MyQuery.pq Successfully exported MyOtherQuery to file C:\\MyProject\\Source\\PowerQuery\\MyOtherQuery.pq","title":"EXAMPLE 1"},{"location":"Reference/Functions/Export-PowerQueries/#example-2","text":"Export-PowerQueries -Path .\\Test.xlsm -ExportPath .\\Source\\PQ -Extension .pqm -Force Successfully exported MyQuery to file C:\\MyProject\\Source\\PQ\\MyQuery.pqm Successfully exported MyOtherQuery to file C:\\MyProject\\Source\\PQ\\MyOtherQuery.pqm","title":"EXAMPLE 2"},{"location":"Reference/Functions/Export-PowerQueries/#parameters","text":"","title":"PARAMETERS"},{"location":"Reference/Functions/Export-PowerQueries/#-path","text":"The path to the Excel PowerQuery Enabled Workbook. Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Path"},{"location":"Reference/Functions/Export-PowerQueries/#-exportpath","text":"(Optional) The path to the folder where the Power Queries' M-Code Formulae will be exported to. If not specified, `\\<ProjectRoot>/Source/PowerQuery/*` is used as the default source code export path for the queries. Type: String Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: .\\Source\\PowerQuery Accept pipeline input: False Accept wildcard characters: False","title":"-ExportPath"},{"location":"Reference/Functions/Export-PowerQueries/#-extension","text":"(Optional) The file extension to use for the exported Power Queries' M-Code Formulae. If not specified, `.pq` is used as the default file extension. Typically, `.pq` is used for Power Query M-Code files, but other extensions are also common such as `.m`, `.pqm`, `.txt`, etc. Type: String Parameter Sets: (All) Aliases: Required: False Position: 3 Default value: .pq Accept pipeline input: False Accept wildcard characters: False","title":"-Extension"},{"location":"Reference/Functions/Export-PowerQueries/#-force","text":"(Optional) If specified, the function will overwrite any existing files in the specified source code export path. Type: SwitchParameter Parameter Sets: (All) Aliases: Required: False Position: Named Default value: False Accept pipeline input: False Accept wildcard characters: False","title":"-Force"},{"location":"Reference/Functions/Export-PowerQueries/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Reference/Functions/Export-PowerQueries/#inputs","text":"","title":"INPUTS"},{"location":"Reference/Functions/Export-PowerQueries/#outputs","text":"","title":"OUTPUTS"},{"location":"Reference/Functions/Export-PowerQueries/#systemcollectionsarraylist","text":"","title":"System.Collections.ArrayList"},{"location":"Reference/Functions/Export-PowerQueries/#notes","text":"During Development of Excel based applications, an essential component of developing and maintaining the project's source code is continuous export/import and synchronization of source files with the host application for portability and most of all, version control. One area typically overlooked in this regard is the M-Code behind the Power Query components in the workbook's data model. Whether it be a Dynamic Query, User Defined Function, Query Parameter, Lookup Table, or any other Power Query component type (i.e. template, data source, properties, metadata, etc.), the M-Code behind the scenes is the foundation that all queries are built from and what drives the core behaviour of the query's component.","title":"NOTES"},{"location":"Reference/Functions/Export-PowerQueries/#related-links","text":"","title":"RELATED LINKS"},{"location":"Reference/Functions/Get-HelloWorld/","text":"Get-HelloWorld SYNOPSIS Returns Hello world SYNTAX Get-HelloWorld [[-Value] <String>] [<CommonParameters>] DESCRIPTION Returns Hello world EXAMPLES EXAMPLE 1 Get-HelloWorld Runs the command PARAMETERS -Value Parameter description can go here or above in format: .PARAMETER \\<Parameter-Name> Type: String Parameter Sets: (All) Aliases: Required: False Position: 1 Default value: GetHelloWorld Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.String NOTES RELATED LINKS","title":"Get-HelloWorld"},{"location":"Reference/Functions/Get-HelloWorld/#get-helloworld","text":"","title":"Get-HelloWorld"},{"location":"Reference/Functions/Get-HelloWorld/#synopsis","text":"Returns Hello world","title":"SYNOPSIS"},{"location":"Reference/Functions/Get-HelloWorld/#syntax","text":"Get-HelloWorld [[-Value] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Reference/Functions/Get-HelloWorld/#description","text":"Returns Hello world","title":"DESCRIPTION"},{"location":"Reference/Functions/Get-HelloWorld/#examples","text":"","title":"EXAMPLES"},{"location":"Reference/Functions/Get-HelloWorld/#example-1","text":"Get-HelloWorld Runs the command","title":"EXAMPLE 1"},{"location":"Reference/Functions/Get-HelloWorld/#parameters","text":"","title":"PARAMETERS"},{"location":"Reference/Functions/Get-HelloWorld/#-value","text":"Parameter description can go here or above in format: .PARAMETER \\<Parameter-Name> Type: String Parameter Sets: (All) Aliases: Required: False Position: 1 Default value: GetHelloWorld Accept pipeline input: False Accept wildcard characters: False","title":"-Value"},{"location":"Reference/Functions/Get-HelloWorld/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Reference/Functions/Get-HelloWorld/#inputs","text":"","title":"INPUTS"},{"location":"Reference/Functions/Get-HelloWorld/#outputs","text":"","title":"OUTPUTS"},{"location":"Reference/Functions/Get-HelloWorld/#systemstring","text":"","title":"System.String"},{"location":"Reference/Functions/Get-HelloWorld/#notes","text":"","title":"NOTES"},{"location":"Reference/Functions/Get-HelloWorld/#related-links","text":"","title":"RELATED LINKS"},{"location":"Reference/PowerQuery%20Reference/","text":"","title":"Index"},{"location":"Reference/VBA%20Reference/","text":"","title":"Index"}]}